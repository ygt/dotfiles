#!/usr/bin/env bash

# https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/
# https://docs.docker.com/engine/installation/linux/docker-ce/debian/
# https://blog.docker.com/2019/03/happy-pi-day-docker-raspberry-pi/

set -e

# Docker GPG fingerprint.
FINGERPRINT="9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88"

# --------------------
# --- Distribution ---
# --------------------

DIST=$(lsb_release -is | awk '{print tolower($0)}')
if [[ "${DIST}" =~ "ubuntu|debian" ]]; then
  echo "Distribution ${DIST} not supported, aborting"
  exit 1
fi

# ------------------------
# --- CPU architecture ---
# ------------------------

ARCH=$(dpkg --print-architecture)
if [[ "${ARCH}" == "i386" ]]; then
  echo "32 bit not supported, aborting"
  exit 1
fi

# Let's assume it's an ARM processor if it's not 32 or 64 bit.
# Always use armhf, should work on armv6, armel...
if [[ "${ARCH}" != "amd64" ]]; then
  ARCH="armhf"
fi

cleanup() {
  sudo apt-get remove docker docker-engine docker.io containerd runc
}

install_aufs_kernel_module() {
  sudo apt-get update -qq

  ubuntu_version=$(lsb_release -rs) # Ubuntu version number in short format, e.g. "18.04"

  # AUFS is a union filesystem. The aufs storage driver was previously the
  # default storage driver used for managing images and layers on Docker for
  # Ubuntu, and for Debian versions prior to Stretch. If your Linux kernel is
  # version 4.0 or higher, and you use Docker CE, consider using the newer
  # overlay2, which has potential performance advantages over the aufs storage
  # driver.
  if [[ "${ubuntu_version}" != $(echo -e "${ubuntu_version}\n16.04" | sort -rV | head -n1) ]]; then
    echo "This Ubuntu version (${ubuntu_version}) requires aufs drivers: installing extra kernel modules."

    sudo apt-get install -y \
      linux-image-extra-$(uname -r) \
      linux-image-extra-virtual

    if [[ -z $(grep aufs /proc/filesystems) ]]; then
      echo "AUFS not properly installed, aborting."
      exit 1
    fi
  fi
}

install_dependencies() {
  if [[ "${DIST}" == "ubuntu" ]]; then
    install_aufs_kernel_module
  fi

  sudo apt-get install -yqq \
      apt-transport-https \
      ca-certificates \
      curl \
      gnupg-agent \
      software-properties-common
}

add_apt_key() {
  curl -fsSL https://download.docker.com/linux/${DIST}/gpg | sudo apt-key add -

  if [[ -z $(sudo apt-key fingerprint 0EBFCD88 | grep "${FINGERPRINT}") ]]; then
    echo "apt repository key not installed correctly, aborting"
    exit 1
  fi

  sudo add-apt-repository \
     "deb [arch=${ARCH}] https://download.docker.com/linux/${DIST} \
     $(lsb_release -cs) \
     stable"
}

install_docker_ce_raspbian() {
  curl -fsSL get.docker.com | bash
  sudo apt-get update -qq
  sudo apt-get update
  systemctl start docker.service
}

install_docker_ce() {
  sudo apt-get update
  sudo apt-get install -yqq docker-ce docker-ce-cli containerd.io
}

install() {
  clean_up
  install_dependencies
  add_apt_key

  if [[ "${DIST}" == "raspbian" ]]; then
    install_docker_ce_raspbian
  else
    install_docker_ce
  fi
}

# ------------
# --- Test ---
# ------------

install
sudo docker info

echo "If you would like to use Docker as a non-root user, you should now"
echo "consider adding your user to the \"docker\" group with something like:"
echo
echo "  sudo groupadd -f docker"
echo "  sudo usermod -aG docker $USER"
echo
echo "Remember that you will have to log out and back in for this to take "
echo "effect!"
echo
echo "WARNING: Adding a user to the \"docker\" group will grant the ability to"
echo "         run containers which can be used to obtain root privileges on"
echo "         the docker host."
echo "         Refer to https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface"
echo "         for more information."
